# -*- coding: utf-8 -*-
"""Study Case (Online Business by Product Type)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12rSw1FkdBf2C-jw7i_uxfaewY43Zf8_V

#Online sales business by product type

Diberikan sebuah data hasil penjualan berdasarkan tipe produk. Net Quantity menyatakan banyaknya barang yang terjual, jika nilainya negatif artinya terdapat barang yang rusak dan mendapatkan kerugian seharga dengan harga jual barang. Gross Sales menyatakan total harga jual yang diperoleh dari harga satuan barang dikali dengan Net Quantity pada jenis barang tertentu. Discounts menyatakan total potongan harga dari suatu jenis barang. Returns menyatakan pengembalian dana yang dilakukan penjual kepada pembeli dikarenakan beberapa alasan pengembalian barang. Total Net Sales merupakan total harga jual akhir, atau total pendapatan dari suatu jenis barang.

#Defining Questions

1. What would be the trend of Revenue vs Nett Sales month over month and year over year? on which month we have the highest or lowest sales? why? (Data by Month)
2. What's the growth rate of sales? (Data by Month)
3. What product line contributes the most to the sales?
4. The discounted items - has it been effective to the sales increase?
5. Which product has the highest return? what can we do to improve?
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('/content/Case study A - online sales business (2).xlsx')
print("Shape dataset : ", df.shape)
print('\nLima data teratas')
df.head()
print('\nInformasi dataset')
df.info()
print('\nStatistik deskriptif')
df.describe()

#Missing Value
df.isnull().sum()

#Menghapus missing value
df.dropna(inplace = True)
print('\nLima data teratas')
df.head()
print('\nInformasi dataset')
df.info()
print('\nStatistik deskriptif')
df.describe()

#Membuat dataframe berdasarkan Product Type
Kolom = df.columns.tolist()
Kolom = Kolom[1:]
df_sum = pd.DataFrame(df.groupby(["Product Type"])[Kolom].sum())
df_sum

#Barang rusak
df[df["Net Quantity"]<0]

"""Dari seluruh penjualan, terdapat 1 produk yang mengalami kerusakan seharga $106.25, dengan tipe produk Kitchen. Sehingga menagalami kerugian sebesar harga produk."""

#Banyaknya jenis barang pada setiap tipe produk
PT_VC = df["Product Type"].value_counts()
PT_VCd = PT_VC.to_dict()
print('Number of Types')
PT_VCd

Index_P = df_sum.index
print("Index dataset")
Index_P

#Membuat kolom Number of Types
PT_VCd1 = []
for i in Index_P:
  PT_VCd1.append(PT_VCd[i])
list1 = pd.DataFrame(PT_VCd1, columns=["Number of Types"], index=[Index_P])
list1

df_sum["Number of Types"]= PT_VCd1
cols = df_sum.columns.tolist()
cols = cols[-1:] + cols[1:-1] 
df_sum = df_sum[cols]
df_sum

#Percentage of Total Net Sales
PP = []
for i in range(len(PT_VCd1)):
    pr = (df_sum["Total Net Sales"][i] / (df_sum["Total Net Sales"].sum())) * 100
    PP.append(round(pr,2))
df_sum["Percentage of Total Net Sales (%)"] = PP
df_sum

#Mengurutkan data berdasarkan Total Net Sales terbesar
df_sum = df_sum.sort_values(by=["Total Net Sales"], ascending=False)
df_sum

#Visualisasi Product Type terhadap Total Net Sales
PP1 = np.array(df_sum["Percentage of Total Net Sales (%)"])
plt.figure(figsize=(10,8))
colour1 = sns.color_palette("bright")[0:18]
graph = plt.bar(df_sum.index, df_sum["Total Net Sales"], color=colour1)
plt.title("Online sales by Product Type", weight="bold", fontsize=15)
plt.ylabel("Total Net Sales ($)", fontsize=10, weight="bold")
plt.xlabel("Product Type", fontsize=10, weight="bold")
plt.xticks(rotation=90)


#Membuat text persentase pada chart
i = 0
for p in graph:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
     
    plt.text(x+width/2,
             y+height+2000,
             str(PP1[i])+"%",
             ha="center", fontsize=7, 
             weight="bold")
    i += 1
plt.show()

"""Berdasarkan dataset, produk yang paling berpengaruh pada penjualan adalah produk basket, dengan 551 jenis tipe yang terjual dan total pemasukan sebesar $134791.39. """



#Visualisasi Product Type terhadap Returns
plt.figure(figsize=(15,8))
colour1 = sns.color_palette("bright")[0:18]
graph = plt.bar(df_sum.index, PPR1, color=colour1)
plt.title("Returns of Product Type", weight="bold", fontsize=15)
plt.ylabel("Returns", fontsize=10, weight="bold")
plt.xlabel("Product Type", fontsize=10, weight="bold")
plt.xticks(rotation=90)

#Persentase Returns
PPR = np.array(df_sum["Returns"])
PPR1 = []
for i in range(len(PT_VCd1)):
  PPR1.append(round((PPR[i]-2*PPR[i]), 2))

#Membuat text pada chart
i = 0
for p in graph:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
     
    plt.text(x+width/2,
             y+height+50,
             "$ "+str(PPR1[i]),
             ha="center", fontsize=7, 
             weight="bold")
    i += 1
plt.show()

"""Produk dengan return terbanyak ada pada produk yang memiliki pemasukan tertinggi yaitu produk basket, yaitu dengan return sebesar $4439.69. Untuk meminimalisir return yang besar, kita dapat mengevaluasi produk basket. Ternyata dengan besarnya penjualan produk basket ini, membuat returnnya juga besar. jika return pada produk ini bisa diminimalisir sebaik mungkin, perusahaan dapat menghasilkan keuntungan yang lebih banyak."""

#Visualisasi Product Type terhadap Discounts
plt.figure(figsize=(15,8))
colour1 = sns.color_palette("bright")[0:18]
graph = plt.bar(df_sum.index, PPD1, color=colour1)
plt.title("Discounts of Product Type", weight="bold", fontsize=15)
plt.ylabel("Discounts", fontsize=10, weight="bold")
plt.xlabel("Product Type", fontsize=10, weight="bold")
plt.xticks(rotation=90)

#Persentase Discounts
PPD = np.array(df_sum["Discounts"])
PPD1 = []
for i in range(len(PT_VCd1)):
  PPD1.append(round((PPD[i]-2*PPD[i]), 2))

#Membuat text pada chart
i = 0
for p in graph:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
     
    plt.text(x+width/2,
             y+height+50,
             "$ "+str(PPD1[i]),
             ha="center", fontsize=7, 
             weight="bold")
    i += 1
plt.show()